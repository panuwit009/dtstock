import { BrowserMultiFormatReader } from '@zxing/browser';
import type { CameraResult } from '@/app/type';

const codeReader = new BrowserMultiFormatReader();

export function closeCamera (): void {
    const videoElement = document.getElementById('video') as HTMLVideoElement;
    if (videoElement) {
        const stream = videoElement.srcObject as MediaStream;
        if (stream) {
            const tracks = stream.getTracks();
            tracks.forEach(track => track.stop()); videoElement.srcObject = null; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÜ track (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏•‡πâ‡∏≠‡∏á)
        }
    }
}

export async function openCamera (
    { setCameraResult }:
    { 
    setCameraResult: React.Dispatch<React.SetStateAction<CameraResult>>; }
    ) {
    // if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    //     setError("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á");
    //     return;
    // }
    try {
    // üîπ ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á + ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
    const stream = await navigator.mediaDevices.getUserMedia({
      video: {
        facingMode: { ideal: "environment" },
        width: { ideal: 1280 },
        height: { ideal: 720 },
        aspectRatio: { ideal: 16 / 9 },
      },
    });

    const videoElement = document.getElementById("video") as HTMLVideoElement;
    if (!videoElement) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö video element");

    // üîπ ‡∏ú‡∏π‡∏Å stream ‡∏Å‡∏±‡∏ö video element
    videoElement.srcObject = stream;
    // await videoElement.play();

    // üîπ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏à‡∏≠‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (‡∏ö‡∏≤‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï)
    const orientation = (screen.orientation as any);
    if (orientation?.lock) {
        try {
            await orientation.lock("landscape");
        } catch (err) {
            console.warn("Lock orientation ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
        }
    }


    // üîπ ‡πÉ‡∏´‡πâ zxing ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å video element ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const result = await codeReader.decodeOnceFromVideoElement(videoElement);
    const qrText = result.getText();

    // üîπ ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    setCameraResult((prev) => [...prev, { barcode: qrText }]);

    // üîπ ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    closeCamera();
  } catch (error: any) {
    console.error(error);
    alert(error.message || "‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }
}
